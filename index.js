import TelegramBot from "node-telegram-bot-api";
import { GoogleGenAI } from "@google/genai";
import fetch from "node-fetch";
import iconv from "iconv-lite";
import fs from "fs";

const tgToken = "8290265239:AAGTL7a79RbNIICJesDGwXEUOls5FtHU1MA";
const geminiApiKey = "AIzaSyBN6tQRclDhbPjh3LMoolhmQMUrETVsHqk";
const LOG_CHAT_ID = -1002804779527;

const filePath = "./prices.json";
const buffer = fs.readFileSync(filePath);
const text = iconv.decode(buffer, "win1251");
const data = JSON.parse(text);

const normalize = (str) =>
  str.toLowerCase().replace(/\s+/g, " ").replace(/[—ë]/g, "–µ").trim();

const itemsMap = {};
for (const key of Object.keys(data.list)) {
  itemsMap[normalize(key)] = key;
}

const bot = new TelegramBot(tgToken, { polling: true });
const ai = new GoogleGenAI({ apiKey: geminiApiKey });

const chatHistory = new Map();
const userModes = new Map();

// –ù–æ–≤—ã–π map –¥–ª—è —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userAnswerStyle = new Map();

function cleanResponse(text) {
  return text
    .replace(/\$\$([^$]+)\$\$/g, "$1")
    .replace(/\$([^$]+)\$/g, "$1")
    .replace(/\*\*+/g, "")
    .trim();
}

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(
    chatId,
    `üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–≤—É—Ö —Ä–µ–∂–∏–º–∞—Ö:

ü§ñ /gpt ‚Äî —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é (–º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ)
üì¶ /items ‚Äî —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –±–∞–∑–µ —Ü–µ–Ω

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–æ–π.`
  );
  userModes.delete(chatId);
  userAnswerStyle.delete(chatId); // –û—á–∏—Å—Ç–∏–º —Å—Ç–∏–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
});

bot.onText(/\/gpt/, (msg) => {
  const chatId = msg.chat.id;
  userModes.set(chatId, "gpt");
  if (!userAnswerStyle.has(chatId)) userAnswerStyle.set(chatId, "medium");
  bot.sendMessage(
    chatId,
    "‚úÖ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º GPT. –ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:\n/style short ‚Äî –∫–æ—Ä–æ—Ç–∫–æ\n/style medium ‚Äî —Å—Ä–µ–¥–Ω–µ\n/style free ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
  );
});

bot.onText(/\/items/, (msg) => {
  const chatId = msg.chat.id;
  userModes.set(chatId, "items");
  bot.sendMessage(
    chatId,
    "üì¶ –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞."
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –æ—Ç–≤–µ—Ç–∞
bot.onText(/\/style (short|medium|free)/, (msg, match) => {
  const chatId = msg.chat.id;
  const style = match[1]; // "short", "medium", "free"
  userAnswerStyle.set(chatId, style);
  bot.sendMessage(
    chatId,
    `‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞: ${
      style === "short"
        ? "–ö–æ—Ä–æ—Ç–∫–∏–π"
        : style === "medium"
        ? "–°—Ä–µ–¥–Ω–∏–π"
        : "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    }`
  );
});

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const mode = userModes.get(chatId);
  const userText = msg.text?.trim() || msg.caption?.trim();
  const hasPhoto = !!msg.photo;

  if (userText?.startsWith("/")) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å

  if (!mode) {
    bot.sendMessage(chatId, "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: /gpt –∏–ª–∏ /items");
    return;
  }

  if (mode === "items") {
    if (!userText) return;

    const normalized = normalize(userText);
    const foundKey = itemsMap[normalized];

    if (!foundKey) {
      bot.sendMessage(chatId, "‚ùå –¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.");
      return;
    }

    const itemData = data.list[foundKey];
    const saPrice =
      itemData.sa?.price !== undefined
        ? itemData.sa.price.toLocaleString("ru-RU")
        : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    const vcPrice =
      itemData.vc?.price !== undefined
        ? itemData.vc.price.toLocaleString("ru-RU")
        : "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö";

    bot.sendMessage(
      chatId,
      `üîç –ü—Ä–µ–¥–º–µ—Ç: ${foundKey}\nüí∞ –¶–µ–Ω–∞ SA: ${saPrice}\nüí∞ –¶–µ–Ω–∞ VC: ${vcPrice}`
    );
  }

  if (mode === "gpt") {
    let history = chatHistory.get(chatId) || [];

    const userFirstName = msg.from?.first_name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    const userLastName = msg.from?.last_name || "";
    const username = msg.from?.username ? `@${msg.from.username}` : "–Ω–µ —É–∫–∞–∑–∞–Ω";
    const phone = msg.contact?.phone_number || "–Ω–µ —É–∫–∞–∑–∞–Ω";

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
      const style = userAnswerStyle.get(chatId) || "medium";

      if (hasPhoto) {
        const photos = msg.photo;
        const fileId = photos[photos.length - 1].file_id;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${tgToken}/${file.file_path}`;

        const resp = await fetch(fileUrl);
        if (!resp.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${resp.status}`);
        const buffer = await resp.arrayBuffer();
        const base64Image = Buffer.from(buffer).toString("base64");

        const ext = file.file_path.split(".").pop().toLowerCase();
        let mimeType = "image/jpeg";
        if (ext === "png") mimeType = "image/png";
        else if (ext === "webp") mimeType = "image/webp";

        // –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è —Ñ–æ—Ç–æ —Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è
        let promptText =
          msg.caption?.trim() || "–û–ø–∏—à–∏, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.";

        if (style === "short") {
          promptText += "\n–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.";
        } else if (style === "medium") {
          promptText += "\n–û—Ç–≤–µ—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.";
        } // free - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º

        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await bot.sendPhoto(LOG_CHAT_ID, fileId, {
          caption: `üì∑ [GPT –†–µ–∂–∏–º] –§–æ—Ç–æ –æ—Ç ${userFirstName} ${userLastName}
üÜî Telegram: ${username}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìù –ü–æ–¥–ø–∏—Å—å: ${promptText}`,
        });

        const contents = [
          {
            role: "user",
            parts: [{ inlineData: { mimeType, data: base64Image } }],
          },
          { role: "user", parts: [{ text: promptText }] },
        ];

        const thinkingMsg = await bot.sendMessage(chatId, "ü§ñ –ë–æ—Ç –¥—É–º–∞–µ—Ç...");

        const response = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents,
          config: { thinkingConfig: { thinkingBudget: 0 } },
        });

        const description = cleanResponse(response.text);

        history.push({
          role: "user",
          parts: [{ text: `–§–æ—Ç–æ + –∑–∞–ø—Ä–æ—Å: ${promptText}` }],
        });
        history.push({ role: "model", parts: [{ text: description }] });
        if (history.length > 10) history.splice(0, history.length - 10);
        chatHistory.set(chatId, history);

        await bot.editMessageText(description, {
          chat_id: chatId,
          message_id: thinkingMsg.message_id,
          parse_mode: "HTML",
        });
      } else if (userText) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º —Å—Ç–∏–ª—è
        let promptText = userText;
        if (style === "short") {
          promptText += "\n–û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.";
        } else if (style === "medium") {
          promptText += "\n–û—Ç–≤–µ—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ, –Ω–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.";
        } // free - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º

        await bot.sendMessage(
          LOG_CHAT_ID,
          `üí¨ [GPT –†–µ–∂–∏–º] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userFirstName} ${userLastName}
üÜî Telegram: ${username}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${userText}`
        );

        history.push({ role: "user", parts: [{ text: promptText }] });
        if (history.length > 10) history.splice(0, history.length - 10);
        chatHistory.set(chatId, history);

        const thinkingMsg = await bot.sendMessage(chatId, "ü§ñ –ë–æ—Ç –¥—É–º–∞–µ—Ç...");

        const response = await ai.models.generateContent({
          model: "gemini-2.5-flash",
          contents: history,
          config: { thinkingConfig: { thinkingBudget: 0 } },
        });

        const cleaned = cleanResponse(response.text);

        history.push({ role: "model", parts: [{ text: cleaned }] });
        if (history.length > 10) history.splice(0, history.length - 10);
        chatHistory.set(chatId, history);

        await bot.editMessageText(cleaned, {
          chat_id: chatId,
          message_id: thinkingMsg.message_id,
          parse_mode: "HTML",
        });
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", err);
      await bot.sendMessage(chatId, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
  }
});

console.log("üöÄ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...");
